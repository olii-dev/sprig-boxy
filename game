/*
@title: first game
@tags: ['beginner']
@addedOn: 2024-07-05
@author: oli
*/

const player = "p";
const box = "b";
const goal = "g";
const wall = "w";
const enemy = "e";

setLegend(
  [ player, bitmap`
......1111......
......1111......
......1111......
.....111111.....
....00000000....
....0......0....
....0.0.0..0....
....0......0....
....0.000..0....
....0......0....
....00000000....
......0..0......
....000..000....
................
................
................`],
  [ box, bitmap`
................
................
................
...CCCCC2CCCCC..
...CCCCC2CCCCC..
...CCCCC2CCCCC..
...CCCCC2CCCCC..
...CCCCC2CCCCC..
...22222222222..
...CCCCC2CCCCC..
...CCCCC2CCCCC..
...CCCCC2CCCCC..
...CCCCC2CCCCC..
...CCCCC2CCCCC..
........2.......
................`],
  [ goal, bitmap`
................
................
................
....444444......
...44....44.....
...4......4.....
...4.......4....
...4..4.4..4....
...4.......4....
...44.4..4.4....
....4..44..4....
....44....44....
.....444444.....
................
................
................`],
  [ wall, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`],
  [enemy, bitmap`
................
................
....6666666.....
....6.....6.....
....66...66.....
....6.....6.....
....6666666.....
....6666666.....
....6666666.....
.....6...6......
.....6...6......
.....6...6......
................
................
................
................`],
);

const myTune = tune`
500,
500: C4/500,
15000`

playTune(myTune)

let level = 0;
const levels = [
  map`
e....w..g
.....w..w
.bw.....w
p.w.....w`,
  map`
ww...
pb...
www.e
www..
.....
.....
..www
..www
....g`,
  map`
pwwe..g
.ww....
.b....b
www..wg`,
  map`
...ww..ww
....wb..p
.w..w.www
.w.ew..ww
.w.....ww
gw..wwwww`,
  map`
wwww
....
.bpg
wwww`,
  map`
....wwwwwwww
g....www....
ww.....w....
www...bw..w.
p.w.w..w..w.
ebw.w.....w.
....w.....w.
....w..wwwwg`,
  map`
wwwwww
.pwgew
.b...w
.....w`,
  map`
ep..w.e
.b..wg.
..w.w..
w......
wwww...`,
  map`
pw.......wg
.w.wwwww.w.
.w....ww.w.
.w.ww.w.bw.
...w..w....
wwwwwww....`,
  map`
pw.......wg
.w.wwwww.w.
.w....ww.w.
.w.ww.w.bw.
...w..w....
wwwwwww....`,
];

const currentLevel = levels[level];
setMap(currentLevel);

setSolids([ player, box, wall ]);

setPushables({
    [player]: [ box ],
    [box]: [ box ]
});

onInput("s", () => {
    getFirst(player).y += 1;
    playTune(myTune);
    checkCollision();
});

onInput("d", () => {
    getFirst(player).x += 1;
    playTune(myTune);
    checkCollision();
});

onInput("a", () => {
    getFirst(player).x -= 1;
    playTune(myTune);
    checkCollision();
});

onInput("w", () => {
    getFirst(player).y -= 1;
    playTune(myTune);
    checkCollision();
});

onInput("j", () => {
  const currentLevel = levels[level];

  if (currentLevel !== undefined) {
    clearText("");
    setMap(currentLevel);
  }
});

let time = 0;
let timerInterval;

function startTimer() {
  timerInterval = setInterval(() => {
    time += 1;
    addText(`Time: ${time}s`, { x: 0, y: 0, color: color`2` });
  }, 1000);
}

startTimer();

function stopTimer() {
  clearInterval(timerInterval);
}

function checkCollision() {
  const playerTile = getFirst(player);
  const enemyTiles = getAll(enemy);

  for (const enemyTile of enemyTiles) {
    if (playerTile.x === enemyTile.x && playerTile.y === enemyTile.y) {
      // Player collided with enemy
      setMap(currentLevel); // Reset the level
      break;
    }
  }
}

afterInput(() => {
  const targetNumber = tilesWith(goal).length;
  const numberCovered = tilesWith(goal, box).length;

  if (numberCovered === targetNumber) {
    level = level + 1;

    const currentLevel = levels[level];
    
    if (currentLevel !== undefined) {
      setMap(currentLevel);
    } else {
      stopTimer();
      addText(`You won!\nYour time: ${time}s`, { y: 4, color: color`3` });
    }
  }
});
